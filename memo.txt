@ 쓰레드세잎일 경우 대체로 동기화 오버헤드로 성능에 영향

@ 체이닝을 사용할 경우 보통 this를 활용(아니면 추가코딩 가능성이 올라감 / chining패키지 참고)

# object
- 동등성 비교를 위해선 반드시 오버라이딩(object 디폴트는 동일성) - 클래스마다 기준이 다르기에(대부분 인텔리제이 사용)

# 불변객체
- 자바에서 기본형 : 절대 변수간 값 공유 불가
- 캐싱, 쓰레드세잎, 엔티티 값 타입 이점
- 불변객체의 수정이 필요한 경우 메서드로 객체를 복사하여 제공 > 따라서 불변객체 사용시 값 반환에 주의(변수에 할당할 것)
> 수정메서드는 set보단 with를 많이 씀

# string
- 자바9 이후 char[] > byte[]
- string 풀은 힙에 위치
- 문자열 비교는 항상 equals로 (EqualsMain2 참고)
> string으로 메서드를 만들때 참조(new String)일지 리터럴일지 모르므로

- 리터럴 +연산의 경우 컴파일 타임에 그냥 합쳐버려서 성능 최적화
- 변수 +연산의 경우 빌더로 바꿔 성능 최적화
- 웬만하면 +연산으로 되지만 루프에선 최적화가 힘듦
> 루프, 조건문에서 동적 조합에서 사용

